// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/user.proto

package usersconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jmandel1027/perspex/schemas/proto/goproto/pkg/users/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	DeleteUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error)
	ModifyUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error)
	RegisterUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error)
	RetrieveUser(context.Context, *connect_go.Request[v1.UserByIdRequest]) (*connect_go.Response[v1.User], error)
	RetrieveUsers(context.Context, *connect_go.Request[v1.UsersByIdRequest]) (*connect_go.Response[v1.Users], error)
	RetrieveUsersPage(context.Context, *connect_go.Request[v1.UsersPageRequest]) (*connect_go.Response[v1.UsersPage], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		deleteUser: connect_go.NewClient[v1.UserInputRequest, v1.User](
			httpClient,
			baseURL+"/user.v1.UserService/DeleteUser",
			opts...,
		),
		modifyUser: connect_go.NewClient[v1.UserInputRequest, v1.User](
			httpClient,
			baseURL+"/user.v1.UserService/ModifyUser",
			opts...,
		),
		registerUser: connect_go.NewClient[v1.UserInputRequest, v1.User](
			httpClient,
			baseURL+"/user.v1.UserService/RegisterUser",
			opts...,
		),
		retrieveUser: connect_go.NewClient[v1.UserByIdRequest, v1.User](
			httpClient,
			baseURL+"/user.v1.UserService/RetrieveUser",
			opts...,
		),
		retrieveUsers: connect_go.NewClient[v1.UsersByIdRequest, v1.Users](
			httpClient,
			baseURL+"/user.v1.UserService/RetrieveUsers",
			opts...,
		),
		retrieveUsersPage: connect_go.NewClient[v1.UsersPageRequest, v1.UsersPage](
			httpClient,
			baseURL+"/user.v1.UserService/RetrieveUsersPage",
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	deleteUser        *connect_go.Client[v1.UserInputRequest, v1.User]
	modifyUser        *connect_go.Client[v1.UserInputRequest, v1.User]
	registerUser      *connect_go.Client[v1.UserInputRequest, v1.User]
	retrieveUser      *connect_go.Client[v1.UserByIdRequest, v1.User]
	retrieveUsers     *connect_go.Client[v1.UsersByIdRequest, v1.Users]
	retrieveUsersPage *connect_go.Client[v1.UsersPageRequest, v1.UsersPage]
}

// DeleteUser calls user.v1.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ModifyUser calls user.v1.UserService.ModifyUser.
func (c *userServiceClient) ModifyUser(ctx context.Context, req *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error) {
	return c.modifyUser.CallUnary(ctx, req)
}

// RegisterUser calls user.v1.UserService.RegisterUser.
func (c *userServiceClient) RegisterUser(ctx context.Context, req *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// RetrieveUser calls user.v1.UserService.RetrieveUser.
func (c *userServiceClient) RetrieveUser(ctx context.Context, req *connect_go.Request[v1.UserByIdRequest]) (*connect_go.Response[v1.User], error) {
	return c.retrieveUser.CallUnary(ctx, req)
}

// RetrieveUsers calls user.v1.UserService.RetrieveUsers.
func (c *userServiceClient) RetrieveUsers(ctx context.Context, req *connect_go.Request[v1.UsersByIdRequest]) (*connect_go.Response[v1.Users], error) {
	return c.retrieveUsers.CallUnary(ctx, req)
}

// RetrieveUsersPage calls user.v1.UserService.RetrieveUsersPage.
func (c *userServiceClient) RetrieveUsersPage(ctx context.Context, req *connect_go.Request[v1.UsersPageRequest]) (*connect_go.Response[v1.UsersPage], error) {
	return c.retrieveUsersPage.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	DeleteUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error)
	ModifyUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error)
	RegisterUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error)
	RetrieveUser(context.Context, *connect_go.Request[v1.UserByIdRequest]) (*connect_go.Response[v1.User], error)
	RetrieveUsers(context.Context, *connect_go.Request[v1.UsersByIdRequest]) (*connect_go.Response[v1.Users], error)
	RetrieveUsersPage(context.Context, *connect_go.Request[v1.UsersPageRequest]) (*connect_go.Response[v1.UsersPage], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/user.v1.UserService/DeleteUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/DeleteUser",
		svc.DeleteUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/ModifyUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/ModifyUser",
		svc.ModifyUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/RegisterUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/RegisterUser",
		svc.RegisterUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/RetrieveUser", connect_go.NewUnaryHandler(
		"/user.v1.UserService/RetrieveUser",
		svc.RetrieveUser,
		opts...,
	))
	mux.Handle("/user.v1.UserService/RetrieveUsers", connect_go.NewUnaryHandler(
		"/user.v1.UserService/RetrieveUsers",
		svc.RetrieveUsers,
		opts...,
	))
	mux.Handle("/user.v1.UserService/RetrieveUsersPage", connect_go.NewUnaryHandler(
		"/user.v1.UserService/RetrieveUsersPage",
		svc.RetrieveUsersPage,
		opts...,
	))
	return "/user.v1.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ModifyUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.ModifyUser is not implemented"))
}

func (UnimplementedUserServiceHandler) RegisterUser(context.Context, *connect_go.Request[v1.UserInputRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.RegisterUser is not implemented"))
}

func (UnimplementedUserServiceHandler) RetrieveUser(context.Context, *connect_go.Request[v1.UserByIdRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.RetrieveUser is not implemented"))
}

func (UnimplementedUserServiceHandler) RetrieveUsers(context.Context, *connect_go.Request[v1.UsersByIdRequest]) (*connect_go.Response[v1.Users], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.RetrieveUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) RetrieveUsersPage(context.Context, *connect_go.Request[v1.UsersPageRequest]) (*connect_go.Response[v1.UsersPage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("user.v1.UserService.RetrieveUsersPage is not implemented"))
}
