// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: users/v1/user.proto

package users

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_DIRECTION_FORWARD_UNSPECIFIED Direction = 0
	Direction_DIRECTION_FORWARD             Direction = 1
	Direction_DIRECTION_BACKWARD            Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "DIRECTION_FORWARD_UNSPECIFIED",
		1: "DIRECTION_FORWARD",
		2: "DIRECTION_BACKWARD",
	}
	Direction_value = map[string]int32{
		"DIRECTION_FORWARD_UNSPECIFIED": 0,
		"DIRECTION_FORWARD":             1,
		"DIRECTION_BACKWARD":            2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_users_v1_user_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_users_v1_user_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{0}
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ModifyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ModifyUserRequest) Reset() {
	*x = ModifyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserRequest) ProtoMessage() {}

func (x *ModifyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserRequest.ProtoReflect.Descriptor instead.
func (*ModifyUserRequest) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ModifyUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ModifyUserResponse) Reset() {
	*x = ModifyUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserResponse) ProtoMessage() {}

func (x *ModifyUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserResponse.ProtoReflect.Descriptor instead.
func (*ModifyUserResponse) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *ModifyUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type RegisterUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *RegisterUserRequest) Reset() {
	*x = RegisterUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserRequest) ProtoMessage() {}

func (x *RegisterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterUserRequest) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type RegisterUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *RegisterUserResponse) Reset() {
	*x = RegisterUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserResponse) ProtoMessage() {}

func (x *RegisterUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserResponse.ProtoReflect.Descriptor instead.
func (*RegisterUserResponse) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type RetrieveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveUserRequest) Reset() {
	*x = RetrieveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUserRequest) ProtoMessage() {}

func (x *RetrieveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUserRequest.ProtoReflect.Descriptor instead.
func (*RetrieveUserRequest) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RetrieveUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *RetrieveUserResponse) Reset() {
	*x = RetrieveUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUserResponse) ProtoMessage() {}

func (x *RetrieveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUserResponse.ProtoReflect.Descriptor instead.
func (*RetrieveUserResponse) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type RetrieveUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *RetrieveUsersRequest) Reset() {
	*x = RetrieveUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUsersRequest) ProtoMessage() {}

func (x *RetrieveUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUsersRequest.ProtoReflect.Descriptor instead.
func (*RetrieveUsersRequest) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveUsersRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RetrieveUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *RetrieveUsersResponse) Reset() {
	*x = RetrieveUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUsersResponse) ProtoMessage() {}

func (x *RetrieveUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUsersResponse.ProtoReflect.Descriptor instead.
func (*RetrieveUsersResponse) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *RetrieveUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type RetrieveUsersPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First     int64     `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	After     int64     `protobuf:"varint,2,opt,name=after,proto3" json:"after,omitempty"`
	Last      int64     `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`
	Before    int64     `protobuf:"varint,4,opt,name=before,proto3" json:"before,omitempty"`
	Direction Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=users.v1.Direction" json:"direction,omitempty"`
}

func (x *RetrieveUsersPageRequest) Reset() {
	*x = RetrieveUsersPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUsersPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUsersPageRequest) ProtoMessage() {}

func (x *RetrieveUsersPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUsersPageRequest.ProtoReflect.Descriptor instead.
func (*RetrieveUsersPageRequest) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *RetrieveUsersPageRequest) GetFirst() int64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *RetrieveUsersPageRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *RetrieveUsersPageRequest) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *RetrieveUsersPageRequest) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *RetrieveUsersPageRequest) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_FORWARD_UNSPECIFIED
}

type RetrieveUsersPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount      int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	StartCursor     int64 `protobuf:"varint,2,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	EndCursor       int64 `protobuf:"varint,3,opt,name=end_cursor,json=endCursor,proto3" json:"end_cursor,omitempty"`
	HasNextPage     bool  `protobuf:"varint,4,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`
	HasPreviousPage bool  `protobuf:"varint,5,opt,name=has_previous_page,json=hasPreviousPage,proto3" json:"has_previous_page,omitempty"`
}

func (x *RetrieveUsersPageResponse) Reset() {
	*x = RetrieveUsersPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveUsersPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveUsersPageResponse) ProtoMessage() {}

func (x *RetrieveUsersPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveUsersPageResponse.ProtoReflect.Descriptor instead.
func (*RetrieveUsersPageResponse) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{11}
}

func (x *RetrieveUsersPageResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RetrieveUsersPageResponse) GetStartCursor() int64 {
	if x != nil {
		return x.StartCursor
	}
	return 0
}

func (x *RetrieveUsersPageResponse) GetEndCursor() int64 {
	if x != nil {
		return x.EndCursor
	}
	return 0
}

func (x *RetrieveUsersPageResponse) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *RetrieveUsersPageResponse) GetHasPreviousPage() bool {
	if x != nil {
		return x.HasPreviousPage
	}
	return false
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{12}
}

func (x *Users) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthId    string                 `protobuf:"bytes,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Email     string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	FirstName string                 `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string                 `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_v1_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_users_v1_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_users_v1_user_proto_rawDescGZIP(), []int{13}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_users_v1_user_proto protoreflect.FileDescriptor

var file_users_v1_user_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7,
	0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x7b,
	0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x22,
	0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f, 0x68, 0x6e,
	0x64, 0x6f, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x6f,
	0x68, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a,
	0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x22, 0x3a, 0x20,
	0x22, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x6f, 0x65, 0x40, 0x67,
	0x6d, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x22, 0x2c, 0x20,
	0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x44, 0x6f,
	0x65, 0x22, 0x7d, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x6e, 0x92,
	0x41, 0x6b, 0x32, 0x69, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20,
	0x22, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x3a,
	0x31, 0x32, 0x33, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20,
	0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x6f, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x22, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x22, 0xa8, 0x01,
	0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x7b,
	0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x22,
	0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f, 0x68, 0x6e,
	0x64, 0x6f, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x6f,
	0x68, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x7b, 0x22, 0x69, 0x64, 0x22,
	0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x22, 0x3a,
	0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x6f, 0x65, 0x40,
	0x67, 0x6d, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x22, 0x2c,
	0x20, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x44,
	0x6f, 0x65, 0x22, 0x7d, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22,
	0x31, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61,
	0x75, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x6f, 0x65, 0x40, 0x67, 0x6d, 0x61,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x44, 0x6f, 0x65, 0x22,
	0x7d, 0x22, 0x2a, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x03, 0x92, 0x41, 0x00, 0x22, 0xaa, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x32,
	0x69, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x33,
	0x34, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f,
	0x68, 0x6e, 0x64, 0x6f, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c,
	0x20, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x4a, 0x6f, 0x68, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x22, 0x4d, 0x0a, 0x14, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x2e, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x3a, 0x03, 0x92, 0x41, 0x00, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x03, 0x92, 0x41, 0x00, 0x22, 0xf8, 0x02, 0x0a, 0x18, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x52, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x4c, 0x61, 0x73,
	0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x52, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x2e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x03, 0x92, 0x41, 0x00, 0x22, 0xce, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x49,
	0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x45, 0x6e, 0x64, 0x20, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6e,
	0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x60, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32,
	0x2f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67,
	0x65, 0x3a, 0x03, 0x92, 0x41, 0x00, 0x22, 0x3f, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x32, 0x06, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x3a, 0x03, 0x92, 0x41, 0x00, 0x22, 0x91, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x41, 0x75, 0x74, 0x68, 0x20, 0x49, 0x44, 0x2e, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x20, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x56,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b,
	0x92, 0x41, 0x18, 0x32, 0x16, 0x55, 0x73, 0x65, 0x72, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x03, 0x92, 0x41, 0x00, 0x2a, 0x5d, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x32, 0xf4, 0x09, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x92, 0x41, 0x5c, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x53, 0x6f, 0x66, 0x74, 0x2d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x39, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x2d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62,
	0x79, 0x20, 0x49, 0x44, 0x20, 0x76, 0x69, 0x61, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4f, 0x92, 0x41, 0x36, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1e, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x3a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x52, 0x92, 0x41, 0x39, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a,
	0x1f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x08, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0xbb, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x54, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x34, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb9, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x92, 0x41, 0x4e, 0x12, 0x1e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x2c, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x3a, 0x03, 0x69, 0x64, 0x73, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0xde, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xff, 0x01, 0x92, 0x41, 0x5a, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x1a, 0x34, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x9b, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x42, 0x12, 0x40, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2f, 0x7b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x7d, 0x2f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x7d, 0x5a, 0x42, 0x12,
	0x40, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x73, 0x74,
	0x7d, 0x2f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x7d, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x42, 0x88, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6a, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x31, 0x30, 0x32, 0x37, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x70, 0x65, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x92, 0x41, 0x3c,
	0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x72, 0x30, 0x0a, 0x06, 0x70, 0x65,
	0x73, 0x70, 0x65, 0x78, 0x12, 0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x6c,
	0x31, 0x30, 0x32, 0x37, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_users_v1_user_proto_rawDescOnce sync.Once
	file_users_v1_user_proto_rawDescData = file_users_v1_user_proto_rawDesc
)

func file_users_v1_user_proto_rawDescGZIP() []byte {
	file_users_v1_user_proto_rawDescOnce.Do(func() {
		file_users_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_users_v1_user_proto_rawDescData)
	})
	return file_users_v1_user_proto_rawDescData
}

var file_users_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_users_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_users_v1_user_proto_goTypes = []interface{}{
	(Direction)(0),                    // 0: users.v1.Direction
	(*DeleteUserRequest)(nil),         // 1: users.v1.DeleteUserRequest
	(*DeleteUserResponse)(nil),        // 2: users.v1.DeleteUserResponse
	(*ModifyUserRequest)(nil),         // 3: users.v1.ModifyUserRequest
	(*ModifyUserResponse)(nil),        // 4: users.v1.ModifyUserResponse
	(*RegisterUserRequest)(nil),       // 5: users.v1.RegisterUserRequest
	(*RegisterUserResponse)(nil),      // 6: users.v1.RegisterUserResponse
	(*RetrieveUserRequest)(nil),       // 7: users.v1.RetrieveUserRequest
	(*RetrieveUserResponse)(nil),      // 8: users.v1.RetrieveUserResponse
	(*RetrieveUsersRequest)(nil),      // 9: users.v1.RetrieveUsersRequest
	(*RetrieveUsersResponse)(nil),     // 10: users.v1.RetrieveUsersResponse
	(*RetrieveUsersPageRequest)(nil),  // 11: users.v1.RetrieveUsersPageRequest
	(*RetrieveUsersPageResponse)(nil), // 12: users.v1.RetrieveUsersPageResponse
	(*Users)(nil),                     // 13: users.v1.Users
	(*User)(nil),                      // 14: users.v1.User
	(*timestamppb.Timestamp)(nil),     // 15: google.protobuf.Timestamp
}
var file_users_v1_user_proto_depIdxs = []int32{
	14, // 0: users.v1.DeleteUserRequest.user:type_name -> users.v1.User
	14, // 1: users.v1.DeleteUserResponse.user:type_name -> users.v1.User
	14, // 2: users.v1.ModifyUserRequest.user:type_name -> users.v1.User
	14, // 3: users.v1.ModifyUserResponse.user:type_name -> users.v1.User
	14, // 4: users.v1.RegisterUserRequest.user:type_name -> users.v1.User
	14, // 5: users.v1.RegisterUserResponse.user:type_name -> users.v1.User
	14, // 6: users.v1.RetrieveUserResponse.user:type_name -> users.v1.User
	14, // 7: users.v1.RetrieveUsersResponse.users:type_name -> users.v1.User
	0,  // 8: users.v1.RetrieveUsersPageRequest.direction:type_name -> users.v1.Direction
	14, // 9: users.v1.Users.users:type_name -> users.v1.User
	15, // 10: users.v1.User.created_at:type_name -> google.protobuf.Timestamp
	15, // 11: users.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 12: users.v1.UserService.DeleteUser:input_type -> users.v1.DeleteUserRequest
	3,  // 13: users.v1.UserService.ModifyUser:input_type -> users.v1.ModifyUserRequest
	5,  // 14: users.v1.UserService.RegisterUser:input_type -> users.v1.RegisterUserRequest
	7,  // 15: users.v1.UserService.RetrieveUser:input_type -> users.v1.RetrieveUserRequest
	9,  // 16: users.v1.UserService.RetrieveUsers:input_type -> users.v1.RetrieveUsersRequest
	11, // 17: users.v1.UserService.RetrieveUsersPage:input_type -> users.v1.RetrieveUsersPageRequest
	2,  // 18: users.v1.UserService.DeleteUser:output_type -> users.v1.DeleteUserResponse
	4,  // 19: users.v1.UserService.ModifyUser:output_type -> users.v1.ModifyUserResponse
	6,  // 20: users.v1.UserService.RegisterUser:output_type -> users.v1.RegisterUserResponse
	8,  // 21: users.v1.UserService.RetrieveUser:output_type -> users.v1.RetrieveUserResponse
	10, // 22: users.v1.UserService.RetrieveUsers:output_type -> users.v1.RetrieveUsersResponse
	12, // 23: users.v1.UserService.RetrieveUsersPage:output_type -> users.v1.RetrieveUsersPageResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_users_v1_user_proto_init() }
func file_users_v1_user_proto_init() {
	if File_users_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_users_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUsersPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveUsersPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_v1_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_users_v1_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_users_v1_user_proto_goTypes,
		DependencyIndexes: file_users_v1_user_proto_depIdxs,
		EnumInfos:         file_users_v1_user_proto_enumTypes,
		MessageInfos:      file_users_v1_user_proto_msgTypes,
	}.Build()
	File_users_v1_user_proto = out.File
	file_users_v1_user_proto_rawDesc = nil
	file_users_v1_user_proto_goTypes = nil
	file_users_v1_user_proto_depIdxs = nil
}
