// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file users/v1/user.proto (package users.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum users.v1.Direction
 */
export enum Direction {
  /**
   * @generated from enum value: DIRECTION_FORWARD_UNSPECIFIED = 0;
   */
  FORWARD_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DIRECTION_FORWARD = 1;
   */
  FORWARD = 1,

  /**
   * @generated from enum value: DIRECTION_BACKWARD = 2;
   */
  BACKWARD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Direction)
proto3.util.setEnumType(Direction, "users.v1.Direction", [
  { no: 0, name: "DIRECTION_FORWARD_UNSPECIFIED" },
  { no: 1, name: "DIRECTION_FORWARD" },
  { no: 2, name: "DIRECTION_BACKWARD" },
]);

/**
 * @generated from message users.v1.DeleteUserRequest
 */
export class DeleteUserRequest extends Message<DeleteUserRequest> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<DeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.DeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined, b: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserRequest, a, b);
  }
}

/**
 * @generated from message users.v1.DeleteUserResponse
 */
export class DeleteUserResponse extends Message<DeleteUserResponse> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<DeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.DeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined, b: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUserResponse, a, b);
  }
}

/**
 * @generated from message users.v1.ModifyUserRequest
 */
export class ModifyUserRequest extends Message<ModifyUserRequest> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<ModifyUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.ModifyUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyUserRequest {
    return new ModifyUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyUserRequest {
    return new ModifyUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyUserRequest {
    return new ModifyUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyUserRequest | PlainMessage<ModifyUserRequest> | undefined, b: ModifyUserRequest | PlainMessage<ModifyUserRequest> | undefined): boolean {
    return proto3.util.equals(ModifyUserRequest, a, b);
  }
}

/**
 * @generated from message users.v1.ModifyUserResponse
 */
export class ModifyUserResponse extends Message<ModifyUserResponse> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<ModifyUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.ModifyUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyUserResponse {
    return new ModifyUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyUserResponse {
    return new ModifyUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyUserResponse {
    return new ModifyUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyUserResponse | PlainMessage<ModifyUserResponse> | undefined, b: ModifyUserResponse | PlainMessage<ModifyUserResponse> | undefined): boolean {
    return proto3.util.equals(ModifyUserResponse, a, b);
  }
}

/**
 * @generated from message users.v1.RegisterUserRequest
 */
export class RegisterUserRequest extends Message<RegisterUserRequest> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<RegisterUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RegisterUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterUserRequest {
    return new RegisterUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterUserRequest {
    return new RegisterUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterUserRequest {
    return new RegisterUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterUserRequest | PlainMessage<RegisterUserRequest> | undefined, b: RegisterUserRequest | PlainMessage<RegisterUserRequest> | undefined): boolean {
    return proto3.util.equals(RegisterUserRequest, a, b);
  }
}

/**
 * @generated from message users.v1.RegisterUserResponse
 */
export class RegisterUserResponse extends Message<RegisterUserResponse> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<RegisterUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RegisterUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterUserResponse {
    return new RegisterUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterUserResponse {
    return new RegisterUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterUserResponse {
    return new RegisterUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterUserResponse | PlainMessage<RegisterUserResponse> | undefined, b: RegisterUserResponse | PlainMessage<RegisterUserResponse> | undefined): boolean {
    return proto3.util.equals(RegisterUserResponse, a, b);
  }
}

/**
 * @generated from message users.v1.RetrieveUserRequest
 */
export class RetrieveUserRequest extends Message<RetrieveUserRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<RetrieveUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RetrieveUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveUserRequest {
    return new RetrieveUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveUserRequest {
    return new RetrieveUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveUserRequest {
    return new RetrieveUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveUserRequest | PlainMessage<RetrieveUserRequest> | undefined, b: RetrieveUserRequest | PlainMessage<RetrieveUserRequest> | undefined): boolean {
    return proto3.util.equals(RetrieveUserRequest, a, b);
  }
}

/**
 * @generated from message users.v1.RetrieveUserResponse
 */
export class RetrieveUserResponse extends Message<RetrieveUserResponse> {
  /**
   * @generated from field: users.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<RetrieveUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RetrieveUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveUserResponse {
    return new RetrieveUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveUserResponse {
    return new RetrieveUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveUserResponse {
    return new RetrieveUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveUserResponse | PlainMessage<RetrieveUserResponse> | undefined, b: RetrieveUserResponse | PlainMessage<RetrieveUserResponse> | undefined): boolean {
    return proto3.util.equals(RetrieveUserResponse, a, b);
  }
}

/**
 * @generated from message users.v1.RetrieveUsersRequest
 */
export class RetrieveUsersRequest extends Message<RetrieveUsersRequest> {
  /**
   * @generated from field: repeated int64 ids = 1;
   */
  ids: bigint[] = [];

  constructor(data?: PartialMessage<RetrieveUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RetrieveUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveUsersRequest {
    return new RetrieveUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveUsersRequest {
    return new RetrieveUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveUsersRequest {
    return new RetrieveUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveUsersRequest | PlainMessage<RetrieveUsersRequest> | undefined, b: RetrieveUsersRequest | PlainMessage<RetrieveUsersRequest> | undefined): boolean {
    return proto3.util.equals(RetrieveUsersRequest, a, b);
  }
}

/**
 * @generated from message users.v1.RetrieveUsersResponse
 */
export class RetrieveUsersResponse extends Message<RetrieveUsersResponse> {
  /**
   * @generated from field: repeated users.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<RetrieveUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RetrieveUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveUsersResponse {
    return new RetrieveUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveUsersResponse {
    return new RetrieveUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveUsersResponse {
    return new RetrieveUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveUsersResponse | PlainMessage<RetrieveUsersResponse> | undefined, b: RetrieveUsersResponse | PlainMessage<RetrieveUsersResponse> | undefined): boolean {
    return proto3.util.equals(RetrieveUsersResponse, a, b);
  }
}

/**
 * @generated from message users.v1.RetrieveUsersPageRequest
 */
export class RetrieveUsersPageRequest extends Message<RetrieveUsersPageRequest> {
  /**
   * @generated from field: int64 first = 1;
   */
  first = protoInt64.zero;

  /**
   * @generated from field: int64 after = 2;
   */
  after = protoInt64.zero;

  /**
   * @generated from field: int64 last = 3;
   */
  last = protoInt64.zero;

  /**
   * @generated from field: int64 before = 4;
   */
  before = protoInt64.zero;

  /**
   * @generated from field: users.v1.Direction direction = 5;
   */
  direction = Direction.FORWARD_UNSPECIFIED;

  constructor(data?: PartialMessage<RetrieveUsersPageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RetrieveUsersPageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "after", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "last", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "before", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "direction", kind: "enum", T: proto3.getEnumType(Direction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveUsersPageRequest {
    return new RetrieveUsersPageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveUsersPageRequest {
    return new RetrieveUsersPageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveUsersPageRequest {
    return new RetrieveUsersPageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveUsersPageRequest | PlainMessage<RetrieveUsersPageRequest> | undefined, b: RetrieveUsersPageRequest | PlainMessage<RetrieveUsersPageRequest> | undefined): boolean {
    return proto3.util.equals(RetrieveUsersPageRequest, a, b);
  }
}

/**
 * @generated from message users.v1.RetrieveUsersPageResponse
 */
export class RetrieveUsersPageResponse extends Message<RetrieveUsersPageResponse> {
  /**
   * @generated from field: int64 total_count = 1;
   */
  totalCount = protoInt64.zero;

  /**
   * @generated from field: int64 start_cursor = 2;
   */
  startCursor = protoInt64.zero;

  /**
   * @generated from field: int64 end_cursor = 3;
   */
  endCursor = protoInt64.zero;

  /**
   * @generated from field: bool has_next_page = 4;
   */
  hasNextPage = false;

  /**
   * @generated from field: bool has_previous_page = 5;
   */
  hasPreviousPage = false;

  constructor(data?: PartialMessage<RetrieveUsersPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.RetrieveUsersPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "start_cursor", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "end_cursor", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "has_next_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "has_previous_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveUsersPageResponse {
    return new RetrieveUsersPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveUsersPageResponse {
    return new RetrieveUsersPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveUsersPageResponse {
    return new RetrieveUsersPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveUsersPageResponse | PlainMessage<RetrieveUsersPageResponse> | undefined, b: RetrieveUsersPageResponse | PlainMessage<RetrieveUsersPageResponse> | undefined): boolean {
    return proto3.util.equals(RetrieveUsersPageResponse, a, b);
  }
}

/**
 * @generated from message users.v1.Users
 */
export class Users extends Message<Users> {
  /**
   * @generated from field: repeated users.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<Users>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.Users";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Users {
    return new Users().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Users {
    return new Users().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Users {
    return new Users().fromJsonString(jsonString, options);
  }

  static equals(a: Users | PlainMessage<Users> | undefined, b: Users | PlainMessage<Users> | undefined): boolean {
    return proto3.util.equals(Users, a, b);
  }
}

/**
 * @generated from message users.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string auth_id = 2;
   */
  authId = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string first_name = 4;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 5;
   */
  lastName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "users.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "auth_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

